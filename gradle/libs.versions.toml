[versions]
groovy = '3.0.13'
hdr-histogram = '2.1.12'
jcache = '1.1.1'
logback-classic = '1.2.11'
managed-metrics-core = '4.2.13'
managed-micrometer = '1.10.2'
managed-new-relic-registry = '0.10.0'
micronaut = '3.7.4'
reflections = '0.10.2'
validation = '2.0.1.Final'
# TODO: Fix this in the core bom (see https://github.com/micronaut-projects/micronaut-micrometer/pull/425)
grpc = '1.50.2'

[libraries]
boms-micrometer = { module = 'io.micrometer:micrometer-bom', version.ref = 'managed-micrometer' }
cache-api = { module = 'javax.cache:cache-api', version.ref = 'jcache' }
groovy-json = { module = 'org.codehaus.groovy:groovy-json', version.ref = 'groovy' }
grpc-api = { module = 'io.grpc:grpc-api', version.ref = 'grpc' }
logback-classic = { module = 'ch.qos.logback:logback-classic', version.ref = 'logback-classic' }

managed-metrics-core = { module = 'io.dropwizard.metrics:metrics-core', version.ref = 'managed-metrics-core' }
managed-micrometer-registry-new-relic-telemetry = { module = 'com.newrelic.telemetry:micrometer-registry-new-relic', version.ref = 'managed-new-relic-registry' }
managed-micrometer-core = { module = 'io.micrometer:micrometer-core', version.ref = 'managed-micrometer' }

hdr-histogram = { module = 'org.hdrhistogram:HdrHistogram', version.ref = 'hdr-histogram' }
micrometer-registry-appoptics = { module = 'io.micrometer:micrometer-registry-appoptics', version.ref = 'managed-micrometer' }
micrometer-registry-atlas = { module = 'io.micrometer:micrometer-registry-atlas', version.ref = 'managed-micrometer' }
micrometer-registry-azure-monitor = { module = 'io.micrometer:micrometer-registry-azure-monitor', version.ref = 'managed-micrometer' }
micrometer-registry-cloudwatch2 = { module = 'io.micrometer:micrometer-registry-cloudwatch2', version.ref = 'managed-micrometer' }
micrometer-registry-datadog = { module = 'io.micrometer:micrometer-registry-datadog', version.ref = 'managed-micrometer' }
micrometer-registry-dynatrace = { module = 'io.micrometer:micrometer-registry-dynatrace', version.ref = 'managed-micrometer' }
micrometer-registry-elastic = { module = 'io.micrometer:micrometer-registry-elastic', version.ref = 'managed-micrometer' }
micrometer-registry-ganglia = { module = 'io.micrometer:micrometer-registry-ganglia', version.ref = 'managed-micrometer' }
micrometer-registry-graphite = { module = 'io.micrometer:micrometer-registry-graphite', version.ref = 'managed-micrometer' }
micrometer-registry-humio = { module = 'io.micrometer:micrometer-registry-humio', version.ref = 'managed-micrometer' }
micrometer-registry-influx = { module = 'io.micrometer:micrometer-registry-influx', version.ref = 'managed-micrometer' }
micrometer-registry-jmx = { module = 'io.micrometer:micrometer-registry-jmx', version.ref = 'managed-micrometer' }
micrometer-registry-kairos = { module = 'io.micrometer:micrometer-registry-kairos', version.ref = 'managed-micrometer' }
micrometer-registry-new-relic = { module = 'io.micrometer:micrometer-registry-new-relic', version.ref = 'managed-micrometer' }
micrometer-registry-prometheus = { module = 'io.micrometer:micrometer-registry-prometheus', version.ref = 'managed-micrometer' }
micrometer-registry-signalfx = { module = 'io.micrometer:micrometer-registry-signalfx', version.ref = 'managed-micrometer' }
micrometer-registry-stackdriver = { module = 'io.micrometer:micrometer-registry-stackdriver', version.ref = 'managed-micrometer' }
micrometer-registry-statsd = { module = 'io.micrometer:micrometer-registry-statsd', version.ref = 'managed-micrometer' }
micrometer-registry-wavefront = { module = 'io.micrometer:micrometer-registry-wavefront', version.ref = 'managed-micrometer' }
netty-transport = { module = 'io.netty:netty-transport' }
reflections = { module = 'org.reflections:reflections', version.ref = 'reflections' }
validation-api = { module = 'javax.validation:validation-api', version.ref = 'validation' }
