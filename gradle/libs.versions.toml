[versions]
groovy = '3.0.10'
jcache = '1.1.1'
logback-classic = '1.2.11'
managed-metrics-core = '4.2.9'
managed-micrometer = '1.9.0'
managed-new-relic-registry = '0.8.0'
micronaut = '3.4.3'
reflections = '0.10.2'
validation = '2.0.1.Final'

[libraries]
boms-micrometer = { module = 'io.micrometer:micrometer-bom', version.ref = 'managed-micrometer' }
cache-api = { module = 'javax.cache:cache-api', version.ref = 'jcache' }
groovy-json = { module = 'org.codehaus.groovy:groovy-json', version.ref = 'groovy' }
grpc-api = { module = 'io.grpc:grpc-api' }
logback-classic = { module = 'ch.qos.logback:logback-classic', version.ref = 'logback-classic' }
managed-metrics-core = { module = 'io.dropwizard.metrics:metrics-core', version.ref = 'managed-metrics-core' }
managed-micrometer-registry-new-relic-telemetry = { module = 'com.newrelic.telemetry:micrometer-registry-new-relic', version.ref = 'managed-new-relic-registry' }
micrometer-core = { module = 'io.micrometer:micrometer-core', version.ref = 'managed-micrometer' }
micrometer-registry-appoptics = { module = 'io.micrometer:micrometer-registry-appoptics', version.ref = 'managed-micrometer' }
micrometer-registry-atlas = { module = 'io.micrometer:micrometer-registry-atlas', version.ref = 'managed-micrometer' }
micrometer-registry-azure-monitor = { module = 'io.micrometer:micrometer-registry-azure-monitor', version.ref = 'managed-micrometer' }
micrometer-registry-cloudwatch2 = { module = 'io.micrometer:micrometer-registry-cloudwatch2', version.ref = 'managed-micrometer' }
micrometer-registry-datadog = { module = 'io.micrometer:micrometer-registry-datadog', version.ref = 'managed-micrometer' }
micrometer-registry-dynatrace = { module = 'io.micrometer:micrometer-registry-dynatrace', version.ref = 'managed-micrometer' }
micrometer-registry-elastic = { module = 'io.micrometer:micrometer-registry-elastic', version.ref = 'managed-micrometer' }
micrometer-registry-ganglia = { module = 'io.micrometer:micrometer-registry-ganglia', version.ref = 'managed-micrometer' }
micrometer-registry-graphite = { module = 'io.micrometer:micrometer-registry-graphite', version.ref = 'managed-micrometer' }
micrometer-registry-humio = { module = 'io.micrometer:micrometer-registry-humio', version.ref = 'managed-micrometer' }
micrometer-registry-influx = { module = 'io.micrometer:micrometer-registry-influx', version.ref = 'managed-micrometer' }
micrometer-registry-jmx = { module = 'io.micrometer:micrometer-registry-jmx', version.ref = 'managed-micrometer' }
micrometer-registry-kairos = { module = 'io.micrometer:micrometer-registry-kairos', version.ref = 'managed-micrometer' }
micrometer-registry-new-relic = { module = 'io.micrometer:micrometer-registry-new-relic', version.ref = 'managed-micrometer' }
micrometer-registry-prometheus = { module = 'io.micrometer:micrometer-registry-prometheus', version.ref = 'managed-micrometer' }
micrometer-registry-signalfx = { module = 'io.micrometer:micrometer-registry-signalfx', version.ref = 'managed-micrometer' }
micrometer-registry-stackdriver = { module = 'io.micrometer:micrometer-registry-stackdriver', version.ref = 'managed-micrometer' }
micrometer-registry-statsd = { module = 'io.micrometer:micrometer-registry-statsd', version.ref = 'managed-micrometer' }
micrometer-registry-wavefront = { module = 'io.micrometer:micrometer-registry-wavefront', version.ref = 'managed-micrometer' }
micronaut-aop = { module = 'io.micronaut:micronaut-aop', version.ref = 'micronaut' }
micronaut-cache-core = { module = 'io.micronaut.cache:micronaut-cache-core' }
micronaut-function-web = { module = 'io.micronaut:micronaut-function-web' }
micronaut-graal = { module = 'io.micronaut:micronaut-graal' }
micronaut-http-client = { module = 'io.micronaut:micronaut-http-client' }
micronaut-http-server-netty = { module = 'io.micronaut:micronaut-http-server-netty' }
micronaut-inject-groovy = { module = 'io.micronaut:micronaut-inject-groovy' }
micronaut-inject-groovy-test = { module = 'io.micronaut:micronaut-inject-groovy-test', version.ref = 'micronaut' }
micronaut-inject-java = { module = 'io.micronaut:micronaut-inject-java' }
micronaut-inject-java-test = { module = 'io.micronaut:micronaut-inject-java-test', version.ref = 'micronaut' }
micronaut-jdbc = { module = 'io.micronaut.sql:micronaut-jdbc' }
micronaut-management = { module = 'io.micronaut:micronaut-management' }
micronaut-rxjava2 = { module = 'io.micronaut.rxjava2:micronaut-rxjava2' }
netty-buffer = { module = 'io.netty:netty-buffer' }
netty-transport = { module = 'io.netty:netty-transport' }
netty-transport-native-epoll = { module = 'io.netty:netty-transport-native-epoll' }
netty-transport-native-kqueue = { module = 'io.netty:netty-transport-native-kqueue' }
r2dbc-pool = { module = 'io.r2dbc:r2dbc-pool' }
reactor-core = { module = 'io.projectreactor:reactor-core' }
reflections = { module = 'org.reflections:reflections', version.ref = 'reflections' }
validation-api = { module = 'javax.validation:validation-api', version.ref = 'validation' }
